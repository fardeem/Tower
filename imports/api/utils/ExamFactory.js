import moment from 'moment';
import { groupBy } from 'lodash';
import { Random } from 'meteor/random';


/**
 * Exam factory to calculate various exam things :P
 *
 * @param  {[Subjects]}.
 * @param  {String} time Default time to begin exams
 * @returns {Object} exam - The exam info generated by the factory
 * @returns {String} exam.examId - Mongo _id
 * @returns {Array}  exam.grades - The grades in this series.
 * @returns {Number} exam.days - Total number of days to finish all the exams
 * @returns {[Sessions]} exam.sessions
 */

const ExamFactory = (subjects = [], time) => {
  const _grouped = groupBy(subjects, 'grade');

  const examId = Random.id();
  const grades = Object.keys(_grouped);


  /**
   * Calculates the number of days needed to
   * complete all the exams.
   *
   * The function starts with day = 0; It then
   * iterates over all the subjects in each grade,
   * and reassigns day with the largest of it's
   * value and the length of the subjects array.
   *
   * @return {Number}
   */
  const days = (() => {
    let _days = 0;
    grades.forEach((grade) => {
      _days = Math.max(_days, _grouped[grade].length);
    });

    return _days;
  })();


  /**
   * Calculates the sessions for a particular day.
   *
   * Starts with an empty sessions array. It then
   * selects the subject for each grade at the
   * particular index(defined by day) and pushes
   * the subject id into the sessions array;
   *
   * @param  {Number} day
   * @return {Array}  An array of subject ids.
   */
  const getSessionsForDay = (day = 0) => {
    const sessions = [];

    grades.forEach((grade) => {
      const current = _grouped[grade][day];

      if (current === undefined) return;
      sessions.push({
        subjectId: current._id,
        startTime: time,
        endTime: moment(time, 'HH:mm')
          .add(current.examtime, 'h')
          .format('HH:mm'),
      });
    });

    return sessions;
  };


  /**
   * Calculates all the sessions for the exam.
   *
   * Starts with an empty sessions array. Loops
   * through each day, with each time reassigning
   * sessions with its previous value and the sessions
   * for that day.
   *
   * @return {Session}
   */
  const getSessions = () => {
    let sessions = [];
    let day = 0;
    const mapIdToDocument = (data) => (
      Object.assign({ _id: Random.id(), examId, day, room: [] }, data));

    for (; day <= days; day++) {
      sessions =
        getSessionsForDay(day)
        .map(mapIdToDocument)
        .concat(sessions);
    }

    return sessions;
  };


  return {
    examId,
    grades,
    days,
    sessions: getSessions(),
  };
};

export default ExamFactory;
